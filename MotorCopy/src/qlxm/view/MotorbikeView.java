/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package qlxm.view;

import qlxm.entity.LocalDateAdapter;
import qlxm.entity.Motorbike;
//import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
//import java.time.format.DateTimeParseException;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
//import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
//import javax.swing.JLabel;
//import javax.swing.JTextField;

/**
 *
 * @author maxng
 */
@XmlJavaTypeAdapter(value = LocalDateAdapter.class)
public class MotorbikeView extends javax.swing.JFrame implements ActionListener, ListSelectionListener {

    /**
     * Creates new form MotorbikeView
     */
	private static final long serialVersionUID = 1L;
 // định nghĩa các cột của bảng motorbike
    private String [] columnNames = new String [] {
            "ID", "Tên xe", "Biển số", "Trạng thái", "Người thuê", "Ngày thuê"};
    private Object data = new Object [][] {};
    //định nghĩa kiểu ngày tháng
    private static DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    
    //code
    public MotorbikeView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneData = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        
        labID = new javax.swing.JLabel();
        labModel = new javax.swing.JLabel();
        labLicense = new javax.swing.JLabel();
        labRentName = new javax.swing.JLabel();
        labStatus = new javax.swing.JLabel();
        labModelSort = new javax.swing.JLabel();
        labDate = new javax.swing.JLabel();
        labSort = new javax.swing.JLabel();
        
        txtID = new javax.swing.JTextField();
        txtID.setEditable(false);
        txtModel = new javax.swing.JTextField();
        txtLicense = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        txtLicenseSort = new javax.swing.JTextField();
        txtSortModel = new javax.swing.JTextField();
        
        checkRent = new javax.swing.JCheckBox();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnRent = new javax.swing.JButton();
        btnSort = new javax.swing.JButton();
        btnModelSort = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý xe máy");

        tableData.setModel(new DefaultTableModel((Object[][]) data, columnNames));
        paneData.setViewportView(tableData);
        if (tableData.getColumnModel().getColumnCount() > 0) {
            tableData.getColumnModel().getColumn(0).setHeaderValue("ID");
            tableData.getColumnModel().getColumn(1).setHeaderValue("Tên xe");
            tableData.getColumnModel().getColumn(2).setHeaderValue("Biển số");
            tableData.getColumnModel().getColumn(3).setHeaderValue("Trạng thái");
            tableData.getColumnModel().getColumn(4).setHeaderValue("Người thuê");
            tableData.getColumnModel().getColumn(5).setHeaderValue("Ngày thuê");
        }

        labID.setText("ID");

        labModel.setText("Tên xe");

        labLicense.setText("Biển số");

        labRentName.setText("Người thuê");

        labStatus.setText("Trạng thái");

        checkRent.setText("Cho thuê");

        labDate.setText("Ngày thuê(yyyy-MM-dd)");

        btnAdd.setText("Thêm");

        btnEdit.setText("Sửa");

        btnDel.setText("Xóa");

        btnRent.setText("Lọc xe chưa thuê");

        labSort.setText("Tìm theo biển số");

        btnSort.setText("Tìm");
        
        btnClear.setText("Làm mới");
        
        btnModelSort.setText("Tìm");
        
        labModelSort.setText("Tìm theo kiểu xe");
        
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(25)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        								.addComponent(labID, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(labModel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(labLicense, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(labRentName, GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        								.addComponent(labStatus, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addComponent(labDate, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE)))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(txtID, 156, 156, 156)
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(txtName, GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        									.addComponent(txtDate, GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        									.addComponent(checkRent, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE)
        									.addComponent(txtLicense, 156, 156, 156)
        									.addComponent(txtModel, 156, 156, 156))))
        						.addComponent(btnRent, GroupLayout.PREFERRED_SIZE, 156, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED, 70, GroupLayout.PREFERRED_SIZE)
        					.addComponent(paneData, GroupLayout.PREFERRED_SIZE, 591, GroupLayout.PREFERRED_SIZE)
        					.addGap(30))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(btnAdd)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(btnEdit)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(btnDel)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(btnClear, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        								.addGroup(layout.createSequentialGroup()
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addComponent(labSort, GroupLayout.PREFERRED_SIZE, 98, GroupLayout.PREFERRED_SIZE))
        								.addComponent(labModelSort, GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(txtSortModel, GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        								.addComponent(txtLicenseSort, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
        							.addGap(18)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(btnModelSort, GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
        								.addComponent(btnSort, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE))))
        					.addContainerGap(661, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap(26, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(labID, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtID, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(labModel, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtModel, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(labLicense, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtLicense, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(labStatus, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        						.addComponent(checkRent, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(labRentName, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtName, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(labDate, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtDate, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
        					.addGap(32)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
        						.addComponent(btnEdit, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
        						.addComponent(btnDel, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
        						.addComponent(btnClear, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(labSort, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        							.addComponent(btnSort, GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
        							.addComponent(txtLicenseSort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGap(9)
        							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        								.addComponent(txtSortModel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addComponent(labModelSort))
        							.addGap(18)
        							.addComponent(btnRent, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(btnModelSort, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))))
        				.addComponent(paneData, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);
        pack();
        btnEdit.setEnabled(false);
        btnDel.setEnabled(false);
        btnAdd.setEnabled(true);
    }// </editor-fold>//GEN-END:initComponents
    
    //message thông báo trạng thái
    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
    
    //Hiển thị list motorbike lên table
    public void showListMotorbike(List<Motorbike> motor){
        int size = motor.size();
        Object [][] motorbike = new Object[size][6];
        for(int i = 0; i < size; i++){
            motorbike [i][0] = motor.get(i).getId();
            motorbike [i][1] = motor.get(i).getModel();
            motorbike [i][2] = motor.get(i).getLicense();
            motorbike [i][3] = motor.get(i).isStatus();
            motorbike [i][4] = motor.get(i).getRentName();
            motorbike [i][5] = motor.get(i).getRentDate();
        }
        tableData.setModel(new DefaultTableModel(motorbike, columnNames));
    }
    //hiển thị xe máy ra table
    public void showAMotorbike(Motorbike motor) {
    	Object [][] motorbike = new Object[1][6];
    	motorbike [0][0] = motor.getId();
        motorbike [0][1] = motor.getModel();
        motorbike [0][2] = motor.getLicense();
        motorbike [0][3] = motor.isStatus();
        motorbike [0][4] = motor.getRentName();
        motorbike [0][5] = motor.getRentDate();
        tableData.setModel(new DefaultTableModel(motorbike, columnNames));
    }
    
    //hiển thị thông tin từ bảng khi chọn hàng
    public void fillMotorbikeFromSelectedRow(){
        int row = tableData.getSelectedRow();
        if(row >= 0){
            txtID.setText(tableData.getModel().getValueAt(row, 0).toString());
            txtModel.setText(tableData.getModel().getValueAt(row, 1).toString());
            txtLicense.setText(tableData.getModel().getValueAt(row, 2).toString());
            checkRent.setSelected(tableData.getModel().getValueAt(row, 3).equals(true));
            if(checkRent.isSelected()) {
            	txtName.setText(tableData.getModel().getValueAt(row, 4).toString());
            	txtDate.setText(tableData.getModel().getValueAt(row, 5).toString());
            }else {
            	txtName.setText("");
            	txtDate.setText("");
            }
        }
        btnEdit.setEnabled(true);
        btnDel.setEnabled(true);
        btnAdd.setEnabled(false);
    }
    //reset trạng thái của hộp tìm kiếm
    public void clearMotorbikeInfo(){
        txtID.setText("");
        txtModel.setText("");
        txtLicense.setText("");
        checkRent.setSelected(false);
        txtName.setText("");
        txtDate.setText("");
        
        btnEdit.setEnabled(false);
        btnDel.setEnabled(false);
        btnAdd.setEnabled(true);
    }
    public void clearTxtSort() {
    	txtSortModel.setText("");
    	txtLicenseSort.setText("");
    }
    public void showMotorbike(Motorbike motor){
        txtID.setText("" + motor.getId());
        txtModel.setText("" + motor.getModel());
        txtLicense.setText("" + motor.getLicense());
        checkRent.setSelected(motor.isStatus());
        txtName.setText("" + motor.getRentName());
        if(motor.getRentDate() == null) {
        	txtDate.setText("");
        }else {
        	txtDate.setText("" + motor.getRentDate());
        }

        btnEdit.setEnabled(true);
        btnDel.setEnabled(true);
        btnAdd.setEnabled(false);
    }
    /*public String getCheckRent(boolean check) {
    	String s;
    	if(check == true) {
    		s = "Đã thuê";
    	}else {
    		s = "Chưa thuê";
    	}
    	return s;
    }
    public void getCheckFromSelectedRow() {
    	int row = tableData.getSelectedRow();
    	if(tableData.getModel().getValueAt(row, 3).equals("Đã thuê")) {
    		checkRent.setSelected(true);
    	}else {
    		checkRent.setSelected(false);
    	}
    }*/
    private boolean validateModel(){
        String model = txtModel.getText();
        if(model == null || "".equals(model.trim())){
            txtModel.requestFocus();
            showMessage("Nhập kiểu xe !");
            return false;
        }
        return true;
    }
     private boolean validateLicense(){
        String license = txtLicense.getText();
        if(license == null || "".equals(license.trim())){
            txtLicense.requestFocus();
            showMessage("Nhập biển số !");
            return false;
        }
        return true;
    }
     private boolean validateNameRent(){
        String name = txtName.getText();
        if(checkRent.isSelected() == true){
            if(name == null || "".equals(name.trim())){
                txtName.requestFocus();
                showMessage("Nhập tên người thuê !");
                return false;
            }
        }
        return true;
    }
     /*private boolean validateLicenseSort(){
         String license = txtLicenseSort.getText();
         if(license == null || "".equals(license.trim())){
             txtLicenseSort.requestFocus();
             showMessage("Nhập biển số !");
             return false;
         }
         return true;
     }*/
     public boolean validateDate() {
    	 String date = txtDate.getText();
    	 if(date == null || "".equals(date.trim())){
    		 txtDate.requestFocus();
    		 showMessage("Nhập ngày thuê");
    		 return false;
    	 }else {
    		 try {
    			 LocalDate.parse(date, dtf);
    			 return true;
    		 } catch(Exception e) {
    			 txtDate.requestFocus();
    			 showMessage("Ngày thuê phải có dạng yyyy-MM-dd \n(ví dụ: 2023-04-26)");
    			 return false;
    		 }
    	 }
     }
      //trả về giá trị motorbike trong bảng
      public Motorbike getMotorbikeInfo(){
          if(!validateModel() || !validateLicense() || !validateNameRent()){
              return null;
          }
          try{
            Motorbike motor = new Motorbike();
            if( txtID.getText() != null && !"".equals(txtID.getText()) ){
                motor.setId(Integer.parseInt(txtID.getText()) );
            }
            motor.setModel(txtModel.getText().trim());
            motor.setLicense(txtLicense.getText().trim());
            motor.setStatus(checkRent.isSelected());
            if(checkRent.isSelected() == false) {
            	LocalDate ld = LocalDate.of(0, 1, 1);
            	motor.setRentDate(ld);
            	motor.setRentName("");
            	return motor;
            }
            motor.setRentName(txtName.getText().trim());
        	motor.setRentDate(LocalDate.parse(txtDate.getText().trim(), dtf));
            return motor;
          } catch (Exception e){
              showMessage(e.getMessage());
          }
          return null;
      }
    public String getLicenseSortTxt() {
    	String s = txtLicenseSort.getText().trim();
    	return s;
    }
    public String getModelSortTxt() {
    	return txtSortModel.getText().trim();
    }
    public void actionPerformed(ActionEvent e) {
    }
    
    public void valueChanged(ListSelectionEvent e) {
    }
    //sự kiện bấm nút thêm
    public void addAddMotorbikeListener(ActionListener listener){
        btnAdd.addActionListener(listener);
    }
    // sự kiện bấm nút sửa
    public void addEditMotorbikeListener(ActionListener listener){
        btnEdit.addActionListener(listener);
    }
    // sự kiện bấm nút xóa
    public void addDeleteMotorbikeListener(ActionListener listener){
        btnDel.addActionListener(listener);
    }
    //lọc xe đã được thuê
    public void addRentMotorbikeListener(ActionListener listener){
        btnRent.addActionListener(listener);
    }
    //tìm kiếm xe theo biển số
    public void addSearchLicenseMotorbikeListener(ActionListener listener){
        btnSort.addActionListener(listener);
    }
    //tìm xe theo model
    public void addSearchModelMotorbikeListener(ActionListener listener) {
    	btnModelSort.addActionListener(listener);
    }
    //làm mới toàn bộ thông tin
    public void addClearModelMotorbikeListener(ActionListener listener) {
    	btnClear.addActionListener(listener);
    }
    public void addListMotorbikeListener(ListSelectionListener listener){
        tableData.getSelectionModel().addListSelectionListener(listener);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRent;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnModelSort;
    private javax.swing.JButton btnClear;
    private javax.swing.JCheckBox checkRent;
    private javax.swing.JLabel labDate;
    private javax.swing.JLabel labID;
    private javax.swing.JLabel labLicense;
    private javax.swing.JLabel labModel;
    private javax.swing.JLabel labRentName;
    private javax.swing.JLabel labSort;
    private javax.swing.JLabel labStatus;
    private javax.swing.JLabel labModelSort;
    private javax.swing.JScrollPane paneData;
    private javax.swing.JTable tableData;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLicense;
    private javax.swing.JTextField txtLicenseSort;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSortModel;

}
